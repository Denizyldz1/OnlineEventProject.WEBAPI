// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineEvent.Data;

#nullable disable

namespace OnlineEvent.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230830123107_createDb")]
    partial class createDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OnlineEvent.Core.Entities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 768, DateTimeKind.Local).AddTicks(5562),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("OnlineEvent.Core.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("InstitutionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstitutionWebSite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e2da00da-eb34-488b-b959-5480e9f39687",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 768, DateTimeKind.Local).AddTicks(5698),
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LockoutEnabled = false,
                            Name = "admin",
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEASxyJeimlGnc3bbUjTEfk8xpE6GcQImDVw8JelW7mPE1Nl8nNwZvFL4YTUKfFzANw==",
                            PhoneNumberConfirmed = false,
                            Surname = "admin",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com",
                            UserType = "Admin"
                        });
                });

            modelBuilder.Entity("OnlineEvent.Core.Entities.AppUserEvent", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("EventUserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserEvents");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            UserId = 1,
                            EventUserType = "Creator"
                        });
                });

            modelBuilder.Entity("OnlineEvent.Core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Müzikli Festival",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5691),
                            IsActive = true
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Sahne",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5704),
                            IsActive = true
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Spor",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5705),
                            IsActive = true
                        });
                });

            modelBuilder.Entity("OnlineEvent.Core.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityName = "Adana",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5855),
                            IsActive = false
                        },
                        new
                        {
                            Id = 2,
                            CityName = "Adıyaman",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5858),
                            IsActive = false
                        },
                        new
                        {
                            Id = 3,
                            CityName = "Afyonkarahisar",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5860),
                            IsActive = false
                        },
                        new
                        {
                            Id = 4,
                            CityName = "Ağrı",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5861),
                            IsActive = false
                        },
                        new
                        {
                            Id = 5,
                            CityName = "Amasya",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5862),
                            IsActive = false
                        },
                        new
                        {
                            Id = 6,
                            CityName = "Ankara",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5863),
                            IsActive = false
                        },
                        new
                        {
                            Id = 7,
                            CityName = "Antalya",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5864),
                            IsActive = false
                        },
                        new
                        {
                            Id = 8,
                            CityName = "Artvin",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5867),
                            IsActive = false
                        },
                        new
                        {
                            Id = 9,
                            CityName = "Aydın",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5868),
                            IsActive = false
                        },
                        new
                        {
                            Id = 10,
                            CityName = "Balıkesir",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5869),
                            IsActive = false
                        },
                        new
                        {
                            Id = 11,
                            CityName = "Bilecik",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5870),
                            IsActive = false
                        },
                        new
                        {
                            Id = 12,
                            CityName = "Bingöl",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5872),
                            IsActive = false
                        },
                        new
                        {
                            Id = 13,
                            CityName = "Bitlis",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5873),
                            IsActive = false
                        },
                        new
                        {
                            Id = 14,
                            CityName = "Bolu",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5874),
                            IsActive = false
                        },
                        new
                        {
                            Id = 15,
                            CityName = "Burdur",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5875),
                            IsActive = false
                        },
                        new
                        {
                            Id = 16,
                            CityName = "Bursa",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5876),
                            IsActive = false
                        },
                        new
                        {
                            Id = 17,
                            CityName = "Çanakkale",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5877),
                            IsActive = false
                        },
                        new
                        {
                            Id = 18,
                            CityName = "Çankırı",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5878),
                            IsActive = false
                        },
                        new
                        {
                            Id = 19,
                            CityName = "Çorum",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5879),
                            IsActive = false
                        },
                        new
                        {
                            Id = 20,
                            CityName = "Denizli",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5881),
                            IsActive = false
                        },
                        new
                        {
                            Id = 21,
                            CityName = "Diyarbakır",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5882),
                            IsActive = false
                        },
                        new
                        {
                            Id = 22,
                            CityName = "Edirne",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5883),
                            IsActive = false
                        },
                        new
                        {
                            Id = 23,
                            CityName = "Elazığ",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5884),
                            IsActive = false
                        },
                        new
                        {
                            Id = 24,
                            CityName = "Erzincan",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5886),
                            IsActive = false
                        },
                        new
                        {
                            Id = 25,
                            CityName = "Erzurum",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5887),
                            IsActive = false
                        },
                        new
                        {
                            Id = 26,
                            CityName = "Eskişehir",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5888),
                            IsActive = false
                        },
                        new
                        {
                            Id = 27,
                            CityName = "Gaziantep",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5889),
                            IsActive = false
                        },
                        new
                        {
                            Id = 28,
                            CityName = "Giresun",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5890),
                            IsActive = false
                        },
                        new
                        {
                            Id = 29,
                            CityName = "Gümüşhane",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5891),
                            IsActive = false
                        },
                        new
                        {
                            Id = 30,
                            CityName = "Hakkari",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5892),
                            IsActive = false
                        },
                        new
                        {
                            Id = 31,
                            CityName = "Hatay",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5893),
                            IsActive = false
                        },
                        new
                        {
                            Id = 32,
                            CityName = "Isparta",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5894),
                            IsActive = false
                        },
                        new
                        {
                            Id = 33,
                            CityName = "Mersin",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5895),
                            IsActive = false
                        },
                        new
                        {
                            Id = 34,
                            CityName = "İstanbul",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5896),
                            IsActive = false
                        },
                        new
                        {
                            Id = 35,
                            CityName = "İzmir",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5897),
                            IsActive = false
                        },
                        new
                        {
                            Id = 36,
                            CityName = "Kars",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5899),
                            IsActive = false
                        },
                        new
                        {
                            Id = 37,
                            CityName = "Kastamonu",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5900),
                            IsActive = false
                        },
                        new
                        {
                            Id = 38,
                            CityName = "Kayseri",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5901),
                            IsActive = false
                        },
                        new
                        {
                            Id = 39,
                            CityName = "Kırklareli",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5902),
                            IsActive = false
                        },
                        new
                        {
                            Id = 40,
                            CityName = "Kırşehir",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5903),
                            IsActive = false
                        },
                        new
                        {
                            Id = 41,
                            CityName = "Kocaeli",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5904),
                            IsActive = false
                        },
                        new
                        {
                            Id = 42,
                            CityName = "Konya",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5906),
                            IsActive = false
                        },
                        new
                        {
                            Id = 43,
                            CityName = "Kütahya",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5907),
                            IsActive = false
                        },
                        new
                        {
                            Id = 44,
                            CityName = "Malatya",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5908),
                            IsActive = false
                        },
                        new
                        {
                            Id = 45,
                            CityName = "Manisa",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5909),
                            IsActive = false
                        },
                        new
                        {
                            Id = 46,
                            CityName = "Kahramanmaraş",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5910),
                            IsActive = false
                        },
                        new
                        {
                            Id = 47,
                            CityName = "Mardin",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5911),
                            IsActive = false
                        },
                        new
                        {
                            Id = 48,
                            CityName = "Muğla",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5912),
                            IsActive = false
                        },
                        new
                        {
                            Id = 49,
                            CityName = "Muş",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5913),
                            IsActive = false
                        },
                        new
                        {
                            Id = 50,
                            CityName = "Nevşehir",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5914),
                            IsActive = false
                        },
                        new
                        {
                            Id = 51,
                            CityName = "Niğde",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5915),
                            IsActive = false
                        },
                        new
                        {
                            Id = 52,
                            CityName = "Ordu",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5916),
                            IsActive = false
                        },
                        new
                        {
                            Id = 53,
                            CityName = "Rize",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5917),
                            IsActive = false
                        },
                        new
                        {
                            Id = 54,
                            CityName = "Sakarya",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5919),
                            IsActive = false
                        },
                        new
                        {
                            Id = 55,
                            CityName = "Samsun",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5920),
                            IsActive = false
                        },
                        new
                        {
                            Id = 56,
                            CityName = "Siirt",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5921),
                            IsActive = false
                        },
                        new
                        {
                            Id = 57,
                            CityName = "Sinop",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5922),
                            IsActive = false
                        },
                        new
                        {
                            Id = 58,
                            CityName = "Sivas",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5923),
                            IsActive = false
                        },
                        new
                        {
                            Id = 59,
                            CityName = "Tekirdağ",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5924),
                            IsActive = false
                        },
                        new
                        {
                            Id = 60,
                            CityName = "Tokat",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5925),
                            IsActive = false
                        },
                        new
                        {
                            Id = 61,
                            CityName = "Trabzon",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5926),
                            IsActive = false
                        },
                        new
                        {
                            Id = 62,
                            CityName = "Tunceli",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5927),
                            IsActive = false
                        },
                        new
                        {
                            Id = 63,
                            CityName = "Şanlıurfa",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5928),
                            IsActive = false
                        },
                        new
                        {
                            Id = 64,
                            CityName = "Uşak",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5970),
                            IsActive = false
                        },
                        new
                        {
                            Id = 65,
                            CityName = "Van",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5972),
                            IsActive = false
                        },
                        new
                        {
                            Id = 66,
                            CityName = "Yozgat",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5973),
                            IsActive = false
                        },
                        new
                        {
                            Id = 67,
                            CityName = "Zonguldak",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5973),
                            IsActive = false
                        },
                        new
                        {
                            Id = 68,
                            CityName = "Aksaray",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5974),
                            IsActive = false
                        },
                        new
                        {
                            Id = 69,
                            CityName = "Bayburt",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5975),
                            IsActive = false
                        },
                        new
                        {
                            Id = 70,
                            CityName = "Karaman",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5976),
                            IsActive = false
                        },
                        new
                        {
                            Id = 71,
                            CityName = "Kırıkkale",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5977),
                            IsActive = false
                        },
                        new
                        {
                            Id = 72,
                            CityName = "Batman",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5978),
                            IsActive = false
                        },
                        new
                        {
                            Id = 73,
                            CityName = "Şırnak",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5979),
                            IsActive = false
                        },
                        new
                        {
                            Id = 74,
                            CityName = "Bartın",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5980),
                            IsActive = false
                        },
                        new
                        {
                            Id = 75,
                            CityName = "Ardahan",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5981),
                            IsActive = false
                        },
                        new
                        {
                            Id = 76,
                            CityName = "Iğdır",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5982),
                            IsActive = false
                        },
                        new
                        {
                            Id = 77,
                            CityName = "Yalova",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5983),
                            IsActive = false
                        },
                        new
                        {
                            Id = 78,
                            CityName = "Karabük",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5984),
                            IsActive = false
                        },
                        new
                        {
                            Id = 79,
                            CityName = "Kilis",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5985),
                            IsActive = false
                        },
                        new
                        {
                            Id = 80,
                            CityName = "Osmaniye",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5986),
                            IsActive = false
                        },
                        new
                        {
                            Id = 81,
                            CityName = "Düzce",
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(5987),
                            IsActive = false
                        });
                });

            modelBuilder.Entity("OnlineEvent.Core.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ApplicationDeadLine")
                        .HasColumnType("datetime2");

                    b.Property<bool>("AreTickets")
                        .HasColumnType("bit");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Quota")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("CreatorUserId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationDeadLine = new DateTime(2023, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AreTickets = true,
                            CategoryId = 1,
                            CityId = 34,
                            CreatedDate = new DateTime(2023, 8, 30, 15, 31, 7, 765, DateTimeKind.Local).AddTicks(6137),
                            CreatorUserId = 1,
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            EventDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Quota = 50,
                            Title = "İlk etkinliğim"
                        });
                });

            modelBuilder.Entity("OnlineEvent.Core.Entities.TicketInfo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WebSiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TicketInfos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TicketPrice = 50m,
                            WebSiteUrl = "www.google.com"
                        });
                });

            modelBuilder.Entity("OnlineEvent.Core.Entities.UserRefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserRefreshToken");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("OnlineEvent.Core.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("OnlineEvent.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("OnlineEvent.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("OnlineEvent.Core.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineEvent.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("OnlineEvent.Core.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineEvent.Core.Entities.AppUserEvent", b =>
                {
                    b.HasOne("OnlineEvent.Core.Entities.Event", "Event")
                        .WithMany("Users")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineEvent.Core.Entities.AppUser", "User")
                        .WithMany("EventTables")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineEvent.Core.Entities.Event", b =>
                {
                    b.HasOne("OnlineEvent.Core.Entities.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineEvent.Core.Entities.City", "City")
                        .WithMany("Events")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineEvent.Core.Entities.AppUser", "User")
                        .WithMany("Events")
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineEvent.Core.Entities.TicketInfo", b =>
                {
                    b.HasOne("OnlineEvent.Core.Entities.Event", "Event")
                        .WithOne("Ticket")
                        .HasForeignKey("OnlineEvent.Core.Entities.TicketInfo", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("OnlineEvent.Core.Entities.AppUser", b =>
                {
                    b.Navigation("EventTables");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("OnlineEvent.Core.Entities.Category", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("OnlineEvent.Core.Entities.City", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("OnlineEvent.Core.Entities.Event", b =>
                {
                    b.Navigation("Ticket");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
